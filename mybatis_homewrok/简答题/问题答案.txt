一、简单题
     1、mybaits动态sql是做什么的？有那些动态sql？简述一下动态sql的执行原理？
         答：mybaits动态sql是mybaits在xml文件中，用标签的形式编写动态sql，用来根据传入参数和不同标签的生成不同的sql语句，实现了sql的复用。
         if 、choose、foreach、where、set、trim、collection、sql、include、association
         其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。从源码的来看，有一个节点接口NodeHandler，每个标签节点都有一个对应的实现NodeHandler的hanlder类进行解析。        
        
     2、mybaits是否支持延迟加载？如果支持，它的实现原理是什么？
	 
	 答：支持 association 关联对象和 collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在 mybaits配置文件中，可以配置启用延迟加载 lazyLoadingEnabled=true。
     	 原理：使用 cglib 动态代理的方式，当调用目标方法时，进入拦截器方法，比如调用 a.getB().getName()，拦截器 invoke()方法发现 a.getB()是null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getB().getName()方法的调用，也是aop编程思想，增强主方法功能。

    3、mybaits都有那些Excutor执行器？它们之间的区别是什么？
	
	答：SimpleExecutor、ReuseExecutor、BatchExecutor
	SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
	ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。就是重复使用Statement对象，这个可以实现statement级别的缓存。
	BatchExecutor：仅支持执行update批量处理，将所有sql都添加到批处理中addBatch()，等待统一执行executeBatch()，它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。

    4、简述一下mybaits一级、二级缓存（分别从存储机构、范围、失效场景。三方面作答）？
	答：mybaits默认开启一级缓存，mybaits的一级缓存是基于SqlSession级别的，也就是说一级缓存的生命周期和SqlSession相同。某个SqlSession进行某个查询后会将该结果放在自己的Map对象中缓存起来。如果在之后所有的查询操作到来之前有任意的SqlSession对该表进行插入、修改、删除写操作，就会清空这个Map中所有缓存信息，重复第一次查询过程；否则当这SqlSession再次发起查询时将先从缓存中获取结果，在缓存中没有获取到结果的情况下才会进mybaits的二级缓存是基于namespace级别的，也就是说多个SqlSession去使用某个Mapper的查询语句时，得到的缓存数据是可共用的。二级缓存开启后，查询就会走二级缓存，没查到直接查库，不存在没查到先走一级缓存这种情况。mybaits默认不开启二级缓存，要使用二级缓存需要做到两点：在mybaits配置中指定cache-anable属性为true在需要缓存的Mapper.xml文件中添加<cache/>标签，指定type缓存实现PerpetualCache，缓存丢弃策略，刷新时间。

    5、简述mybaits插件运行原理，以及如何编写一个插件？
	答：mybaits仅支持编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，mybaits使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现mybaits的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，还需要在配置文件中配置编写的插件。
	